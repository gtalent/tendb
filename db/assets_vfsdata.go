// Code generated by vfsgen; DO NOT EDIT.

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 5, 1, 23, 27, 37, 503842343, time.UTC),
		},
		"/01_init": &vfsgen۰DirInfo{
			name:    "01_init",
			modTime: time.Date(2019, 5, 7, 1, 8, 29, 969497236, time.UTC),
		},
		"/01_init/down.sql": &vfsgen۰CompressedFileInfo{
			name:             "down.sql",
			modTime:          time.Date(2019, 4, 30, 6, 0, 6, 918691434, time.UTC),
			uncompressedSize: 1121,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\x4f\x4f\xb4\x30\x10\xc6\xef\xfd\x14\x73\x7c\xdf\x98\x12\xf1\x26\x9c\x34\x78\xdb\xb8\xab\xbb\x77\x32\xc0\x08\x4d\xfa\x67\xd2\xc2\x1a\xbe\xbd\xc1\x9a\xb8\x81\xd5\x78\xe8\xb1\xe9\x33\xbf\xdf\x3c\x23\xa5\x90\x12\x0e\x2e\x8c\xbd\xa7\xe3\xcb\x0e\x3a\x1c\xb1\xc1\x40\xd0\x4d\x86\x85\x94\x62\xf9\xaf\x26\xc3\xd4\xc1\x9b\x77\xe6\x3b\x70\x26\x1f\x94\xb3\x90\xe7\xd9\x1d\xfc\xab\xa8\x51\x18\x1f\x32\xcf\xb8\xef\xfa\xfb\xdb\x9b\xfc\xff\xc5\x74\x33\x03\xf7\xf5\x82\xfd\xe3\xa8\x88\xcb\x3d\xa3\xa1\x02\x5a\x4d\xe8\xd1\xb6\x54\x8f\x33\x53\x28\xe1\x34\x33\x15\x70\x7a\x78\xdc\x3d\x95\x70\x6c\x07\x32\x58\x00\x4f\x8d\x56\x6d\x09\xfb\x77\x4b\xbe\x00\x8e\xbd\xc2\x67\x8f\xea\x75\x7f\x88\xf9\xaf\x58\xb6\x66\x8a\x1f\x94\x89\x6d\x1b\x11\x9d\xc9\x8e\x09\x7b\x5d\xf2\xae\xa9\x12\x5a\x36\x02\x46\xbf\xc8\xdb\x41\xe9\xae\xf6\xa4\x71\x54\xce\x86\x41\x71\x1a\xe9\x2f\xf8\xf5\x22\xe4\x58\x53\x1a\x69\x44\xad\x04\xde\x69\xaa\x31\x04\xd5\x5b\x93\xec\xa8\x1b\xe8\x15\x69\x3a\xd3\x06\x3f\x05\xf2\x69\xf0\x91\x24\xc4\x47\x00\x00\x00\xff\xff\x83\xc8\x93\xdb\x61\x04\x00\x00"),
		},
		"/01_init/up.sql": &vfsgen۰CompressedFileInfo{
			name:             "up.sql",
			modTime:          time.Date(2019, 5, 7, 1, 8, 29, 965497124, time.UTC),
			uncompressedSize: 13171,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x9b\x4d\x93\xda\x38\x13\xc7\xcf\x0f\x9f\x42\xb7\x30\xf5\x2c\x53\x21\x55\xa9\xad\x9d\x39\x11\xf0\x6e\xa8\x65\x4c\x02\x66\x93\x39\xb9\x84\xd5\x03\xaa\xf5\xdb\x4a\x62\x32\xe4\xd3\x6f\xf9\x05\x50\xb0\x25\xdb\x13\x69\xe1\x68\xab\xd5\xfa\x75\xa3\x7f\xb7\x6c\x17\x83\x41\x6f\x30\x40\x9f\x12\x2e\x36\x0c\x96\x9f\x67\x88\x60\x81\xd7\x98\x03\x22\xbb\x28\xed\x0d\x06\xbd\x6c\x7c\xb2\x8b\x52\x20\xe8\x89\x25\xd1\xc9\xe0\x19\x18\xa7\x49\x8c\x86\xc3\xdb\x77\xa8\x3f\x81\x35\xc5\xc5\xc5\x60\x78\x9b\x6e\xc8\xe6\xb7\xb7\xff\x1f\xde\x48\xb3\xd7\x7b\x94\x6e\xfc\xcc\x6d\xcb\xa9\xbd\x02\xce\xc5\x11\xdc\xa1\x20\x04\xcc\x70\x1c\x80\x2f\xf6\x29\xf0\x7b\xe4\xed\x53\xb8\x43\xde\xe8\xc3\xcc\xb9\x47\xcb\x60\x0b\x11\xbe\x43\xe9\x6e\x1d\xd2\xe0\x1e\xcd\xbf\xc5\xc0\xee\x50\x5a\xc4\xc5\xf3\x38\xc6\x0b\x67\xe4\x39\xc5\x8c\xd2\xf0\xf6\xcc\x2b\xea\xf7\x10\x42\x88\x12\xb4\xa6\x1b\x1a\x0b\xe4\xce\x3d\xe4\xae\x66\xb3\x5f\xf2\xfb\x01\x03\x2c\x80\xf8\x58\x20\x41\x23\xe0\x02\x47\x29\xfa\x46\xc5\x36\xbf\x44\xdf\x93\x18\x0a\xc3\x5d\x4a\xda\x19\x12\x08\xa1\x95\x61\x8c\x23\x40\xcf\x98\x05\x5b\xcc\xfa\xef\xdf\xde\x9c\x91\x91\x1d\xc3\x22\xcb\x68\xc1\x5d\xdc\x5c\xef\x68\x28\x68\x8c\xd6\x49\x12\x02\x8e\x8f\x53\x7a\x37\xf7\xbd\x5e\x6f\x34\xf3\x9c\x85\x3e\x1b\xf3\x2f\x6e\x66\x32\x3f\xe6\xf1\x5e\xfb\x9b\xf8\x94\xf8\x1c\xfe\x39\xfc\x34\x4b\xe7\xf3\xca\x71\xc7\xdd\x7e\x9d\xc3\x24\x05\x52\xb9\x44\x1e\xde\x68\x59\x46\x9b\x5f\x2d\xbd\xd1\xc2\x43\x5f\xa6\xde\x47\x34\xcc\x6f\x4c\xdd\xf1\xc2\x79\x70\x5c\x0f\x7d\x78\x2c\x6f\xb9\x73\xf4\x30\x75\xff\x1a\xcd\x56\xce\xf1\x7a\xf4\xf5\x74\x3d\x1e\x8d\x3f\x3a\x68\xd8\x2e\x3b\x25\x8a\xa1\x24\xe5\x6e\x26\xe8\xc3\x63\xbb\x6c\x15\x78\xed\x92\x75\x74\xad\x30\xbb\xa5\x24\x8b\xb8\x96\xd9\xb8\xce\xae\x58\x62\x3f\xa6\xc5\x67\xf0\x04\xac\x1e\x32\x05\xc6\x93\x58\x67\x91\xb1\x29\x97\x6b\xd6\x5f\x07\xe9\xd9\x55\xdd\x75\x08\xae\xbb\xd6\xfe\x1b\x99\x35\x2b\xac\x4e\x5c\xf0\x0c\xb1\x30\xda\xc5\x24\x8f\xd7\x2b\xaf\x86\x0e\xd6\xb9\x59\xc9\x41\x37\xed\x0b\xc9\xd6\x86\x5c\xaa\xee\x2f\xa2\x97\x2a\x86\x81\xc4\x18\x51\x8c\x82\x4c\x96\x8c\x64\xa2\xd2\x8c\x51\xb9\x5c\xa9\x52\xfe\xd7\xa2\xb9\x9c\x52\xf5\xea\x16\xd4\x52\x5e\x2d\x95\x65\x4f\x54\x97\xd7\x53\x37\x29\xd9\x57\x91\x5e\x40\x75\xda\x49\x31\xcb\xf6\x4b\xb0\xa5\x21\xf1\x19\x84\xf9\x83\x02\xdf\xd2\xd4\x94\x9e\xd4\x0b\x5c\xa7\xc6\xf2\x23\x5c\xc1\xac\xd1\xcf\x21\x9c\x1a\x03\xa5\x68\x34\x99\x68\xda\x3e\xea\xa9\x36\xc4\xd5\xb8\xda\x45\x04\xd7\x48\x65\x3e\x8b\x46\x84\xd9\x8e\x5b\x16\xab\x7a\x46\x9d\x80\x21\x49\x43\x30\x25\xd6\xdc\xd9\xf5\x0a\xf3\x89\x32\x2e\xfc\x86\xc3\x62\x44\x09\x09\xa1\x62\x55\x0c\x86\xb8\xd9\x01\xdf\x3d\x3d\xd1\x97\x93\x41\x39\x35\xc2\x8c\x51\x20\x95\x43\x68\x39\x09\x5e\x10\x8d\x05\x6c\x80\x9d\x1f\x5e\x29\x13\x5b\x82\xf7\x0d\xb1\x6d\x93\x08\xfc\x74\x9b\xf5\xdf\xc3\xca\xc3\x03\x75\x00\x61\xa8\x1a\x83\x08\xd3\xd0\xc7\x84\x30\xe0\xfc\x38\xfc\xeb\x81\xba\x1c\xf0\x43\x1a\xc3\xb0\x9a\x0f\x79\xf8\x5d\x75\x38\xa0\x62\x5f\xbd\x9b\xb2\xe4\x99\xc6\x41\x4d\x7a\xbf\xd3\xd4\x0f\x12\x52\x83\x99\x85\xb7\x4e\x76\xf1\x31\x7f\xc5\xed\x64\x27\xfc\xe4\xc9\xc7\x0c\xf0\x8f\x03\x11\x44\xeb\xac\xb8\xd6\x26\x3b\x4e\x04\x70\x24\xe0\xa5\x7c\x99\x95\xd2\x40\xec\x18\xf8\x29\x16\xdb\xe3\xd2\xef\xde\xbf\xbf\x51\x17\xe3\x62\xa7\x37\x96\x8c\xdc\xcc\x4a\x91\x95\x3d\x5f\xa6\xa0\xca\x04\x3f\x97\x09\x33\x85\xb2\xc2\xf3\x43\x51\xcc\x47\x6b\x0a\x20\x4b\x42\xf0\x31\xe7\x74\x13\x47\x06\x9f\x03\xce\xdd\x5e\x6f\x51\x6c\x7e\x26\xc8\x63\xd1\x8c\x73\x81\x99\xf0\xb5\xcf\x04\x65\xad\x89\x89\xde\x4c\xa9\xb7\x4a\x3a\x9b\xf6\xdb\xf9\x04\x1b\x1a\x54\xac\x71\x11\x35\x2a\x58\x4c\xe5\xc9\x88\x42\x75\x8c\xb2\x56\xcf\xed\x14\xaa\x35\x29\xd5\x2b\xd6\xa7\xf2\xb4\xa1\x15\x4b\x3b\x85\x58\x93\xc5\xc5\xb5\xd0\x49\x00\xd6\x77\xbd\x76\xab\xd7\xed\xef\x1d\x07\x66\x6a\x7f\xe7\xbe\x94\xfb\x1b\x7d\x5a\x4c\x1f\x46\x8b\x47\xf4\xa7\xf3\xd8\x70\x22\x3c\xcd\x59\xb9\xd3\xcf\x2b\x47\x79\xa8\x96\x6d\x55\xe7\xe6\xaa\x4d\x8a\x39\xff\x96\x30\xe2\x6f\x31\xdf\xa2\xf5\x5e\x00\x56\x6e\xf1\x22\xa6\xa6\xdf\x36\xb7\xb2\xb1\xc5\x65\xc7\x17\xd9\xe2\x32\xc0\x4f\xa5\xc1\xc8\x16\xaf\xd0\xc8\x5b\x3c\x1f\xd4\x7d\x07\x2c\xdf\xb3\x53\x72\x60\x9b\x38\xbf\x8f\x56\x33\xaf\x0b\x51\x91\x9c\xb9\x3b\x53\x7d\x88\x44\x85\xdd\x78\x3e\x5b\x3d\xb8\x99\x0c\x96\x8e\x77\x58\x08\xc5\xf0\x22\x9e\x71\xd8\x7f\xa3\xfd\xd6\xf9\xe6\xee\x8e\xc1\x26\x08\x31\xe7\x37\xea\x8f\x9a\xd6\xe2\x78\x65\x08\x6d\xe8\xe5\xcf\x1d\x86\xf1\x65\xd7\x5d\xf8\xab\x6f\xf5\x1b\x03\xb0\xc3\xfe\x0a\xec\x36\xc4\x9a\xb7\x79\x86\xa3\xd0\xac\xd4\x25\xb2\xc6\xf7\x50\xda\x68\x8b\xc7\x65\xd3\x91\x15\x5e\x3b\x45\x21\x3f\x24\xea\x88\x2b\x0f\x1c\x86\xd9\x2b\xfe\xbb\x44\xa1\x38\x48\x37\xc5\x63\x25\x88\xee\xe4\x6d\x70\x8b\xfe\x6e\x18\xb7\x70\xda\x05\x57\x6e\x6c\xad\xca\x7f\x59\xe9\xce\x1b\x48\xfa\x37\xec\x0f\xa1\x8c\xe7\xee\xd2\x5b\x8c\xa6\xae\xd9\x06\x57\x1c\x43\x26\x13\xc9\x7f\x2d\x86\x7c\xde\x43\x7d\x4a\x74\xad\x4c\x6a\x22\x56\x23\xd0\xc3\xb7\xe4\x96\x3b\x8d\xdc\x3d\xb2\x53\xa7\x6f\x81\x5e\x5a\xa3\x0e\xbf\x0e\xa1\x3c\x37\xa3\x7e\x76\xa3\x75\x00\x36\x52\xdf\x01\xbe\x7d\xf2\xf9\xe1\x3b\xa5\x35\x62\x35\x6c\x4b\x4e\x4d\x33\xd4\x34\x38\x1b\xf1\xa8\x97\xab\x8b\xb1\x01\xae\x39\xee\xa2\x55\x96\xed\xcf\x4a\x3c\xb9\xeb\x5a\xf6\xd3\xa2\x8d\x9c\x95\xb6\x58\x69\x75\x36\xd8\xcf\x17\xa9\x8b\xa2\x16\xa4\x55\x3c\xbc\x7c\xc7\x60\x8b\x5c\x89\xdb\x92\x91\x92\x17\xff\xbc\x53\x9c\xde\x4e\x1d\x88\xa7\xee\xc4\xf9\xda\xe9\xa1\x39\x9f\xd1\xe0\x1d\xcd\x5d\xd5\x03\xdb\x6a\x39\x75\xff\x40\x6b\xc1\x00\x50\xff\x34\x43\x8f\x6f\x8d\xbc\x09\xba\x1b\xaf\x5c\x5f\xcd\x02\xd7\x7b\x96\x88\xe5\x2e\xd3\x19\xd9\x0a\xad\x0e\xb4\x1b\xa3\xa6\x4a\x9a\xe5\x6e\xb5\x90\x14\x8b\xa6\xed\x74\x8a\xaf\xa8\xa4\x86\x63\x39\x77\x2a\x73\x17\x6d\xa3\x0b\x63\xa5\x4e\x9a\xa5\xd5\xb8\x97\xb8\x2b\x6d\xa4\x6b\x04\x36\xb0\x35\xac\x6d\x00\x55\xff\xa3\x41\x41\x12\xa5\x99\x7d\x66\xf7\x6f\x00\x00\x00\xff\xff\xb0\xfe\xf1\xf4\x73\x33\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/01_init"].(os.FileInfo),
	}
	fs["/01_init"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/01_init/down.sql"].(os.FileInfo),
		fs["/01_init/up.sql"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
