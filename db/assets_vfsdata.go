// Code generated by vfsgen; DO NOT EDIT.

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 5, 1, 1, 42, 23, 289691434, time.UTC),
		},
		"/01_init": &vfsgen۰DirInfo{
			name:    "01_init",
			modTime: time.Date(2019, 5, 1, 1, 42, 23, 289691434, time.UTC),
		},
		"/01_init/down.sql": &vfsgen۰CompressedFileInfo{
			name:             "down.sql",
			modTime:          time.Date(2019, 4, 30, 6, 0, 6, 918691434, time.UTC),
			uncompressedSize: 1121,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\x4f\x4f\xb4\x30\x10\xc6\xef\xfd\x14\x73\x7c\xdf\x98\x12\xf1\x26\x9c\x34\x78\xdb\xb8\xab\xbb\x77\x32\xc0\x08\x4d\xfa\x67\xd2\xc2\x1a\xbe\xbd\xc1\x9a\xb8\x81\xd5\x78\xe8\xb1\xe9\x33\xbf\xdf\x3c\x23\xa5\x90\x12\x0e\x2e\x8c\xbd\xa7\xe3\xcb\x0e\x3a\x1c\xb1\xc1\x40\xd0\x4d\x86\x85\x94\x62\xf9\xaf\x26\xc3\xd4\xc1\x9b\x77\xe6\x3b\x70\x26\x1f\x94\xb3\x90\xe7\xd9\x1d\xfc\xab\xa8\x51\x18\x1f\x32\xcf\xb8\xef\xfa\xfb\xdb\x9b\xfc\xff\xc5\x74\x33\x03\xf7\xf5\x82\xfd\xe3\xa8\x88\xcb\x3d\xa3\xa1\x02\x5a\x4d\xe8\xd1\xb6\x54\x8f\x33\x53\x28\xe1\x34\x33\x15\x70\x7a\x78\xdc\x3d\x95\x70\x6c\x07\x32\x58\x00\x4f\x8d\x56\x6d\x09\xfb\x77\x4b\xbe\x00\x8e\xbd\xc2\x67\x8f\xea\x75\x7f\x88\xf9\xaf\x58\xb6\x66\x8a\x1f\x94\x89\x6d\x1b\x11\x9d\xc9\x8e\x09\x7b\x5d\xf2\xae\xa9\x12\x5a\x36\x02\x46\xbf\xc8\xdb\x41\xe9\xae\xf6\xa4\x71\x54\xce\x86\x41\x71\x1a\xe9\x2f\xf8\xf5\x22\xe4\x58\x53\x1a\x69\x44\xad\x04\xde\x69\xaa\x31\x04\xd5\x5b\x93\xec\xa8\x1b\xe8\x15\x69\x3a\xd3\x06\x3f\x05\xf2\x69\xf0\x91\x24\xc4\x47\x00\x00\x00\xff\xff\x83\xc8\x93\xdb\x61\x04\x00\x00"),
		},
		"/01_init/up.sql": &vfsgen۰CompressedFileInfo{
			name:             "up.sql",
			modTime:          time.Date(2019, 4, 30, 5, 59, 10, 160691434, time.UTC),
			uncompressedSize: 13355,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x9b\xdf\x93\xda\x36\x10\xc7\xdf\xf9\x2b\xf4\x16\x6e\x5a\x6e\x42\x66\x32\x9d\x72\x4f\x04\xdc\x86\x29\x67\x12\x30\x4d\xee\xc9\x23\xac\x05\x34\xf5\xaf\xca\xe2\x72\xe4\xaf\xef\xf8\x17\x28\xd8\x92\xed\x8b\x54\x78\xb4\xb5\x5a\x7d\x76\xd1\x77\x57\xb6\x87\xc1\xa0\x37\x18\xa0\x4f\x51\xc2\x77\x0c\x56\x9f\xe7\x88\x60\x8e\x37\x38\x01\x44\x0e\x41\xdc\x1b\x0c\x7a\xe9\xf8\xf4\x10\xc4\x40\xd0\x96\x45\xc1\xd9\xe0\x19\x58\x42\xa3\x10\x0d\x87\xf7\xef\x50\x7f\x0a\x1b\x8a\xf3\x8b\xc1\xf0\x3e\xde\x91\xdd\xef\x6f\x7f\x19\xde\x09\xb3\x37\x47\x14\xef\xdc\xd4\x6d\xcb\xa9\xbd\x1c\xce\xc6\x01\x8c\x90\xe7\x03\x66\x38\xf4\xc0\xe5\xc7\x18\x92\x07\xe4\x1c\x63\x18\x21\x67\xfc\x61\x6e\x3d\xa0\x95\xb7\x87\x00\x8f\x50\x7c\xd8\xf8\xd4\x7b\x40\x8b\x6f\x21\xb0\x11\x8a\xf3\xb8\x92\x2c\x8e\xc9\xd2\x1a\x3b\x56\x3e\xa3\x30\xbc\xbf\xf0\x8a\xfa\x3d\x84\x10\xa2\x04\xd1\x90\xc3\x0e\x18\xb2\x17\x0e\xb2\xd7\xf3\xf9\xaf\xd9\x80\xc7\x00\x73\x20\x2e\xe6\x88\xd3\x00\x12\x8e\x83\x18\x7d\xa3\x7c\x9f\x5d\xa2\xef\x51\x08\xb9\xe1\x21\x26\xed\x0c\x09\xf8\xd0\xca\x30\xc4\x01\xa0\x67\xcc\xbc\x3d\x66\xfd\xf7\x6f\xef\x2e\xc8\xc8\x81\x61\x9e\xa6\x74\x43\x77\x34\xe4\xf9\xcd\xcd\x81\xfa\x9c\x86\x68\x13\x45\x3e\xe0\xf0\x34\xa5\x77\xf7\xd0\xeb\xf5\xc6\x73\xc7\x5a\xaa\xd3\xb1\xf8\x62\xa7\x26\x8b\x53\x22\x1f\x94\x3f\x8a\x4b\x89\x9b\xc0\xbf\xe5\x6f\xb3\xb2\x3e\xaf\x2d\x7b\xd2\xed\xe7\x29\x27\x49\x90\x8a\x25\xb2\xf0\xc6\xab\xf2\x67\xca\x2e\x57\xce\x78\xe9\xa0\x2f\x33\xe7\x23\x1a\x66\x37\x66\xf6\x64\x69\x3d\x5a\xb6\x83\x3e\x3c\x15\xb7\xec\x05\x7a\x9c\xd9\x7f\x8f\xe7\x6b\xeb\x74\x3d\xfe\x7a\xbe\x9e\x8c\x27\x1f\x2d\x34\x6c\x97\x9e\x82\x45\x53\x96\x32\x37\x53\xf4\xe1\xa9\x5d\xba\x72\xbc\x76\xd9\x3a\xb9\x96\x98\xdd\x53\x92\x46\x5c\xcb\xac\x5d\x69\xb7\x2c\xb2\x1f\xf3\xe2\x32\xd8\x02\x2b\x14\x75\xa9\x37\xcc\x41\xea\xac\x59\x5f\x1d\xa4\x65\x56\x55\x37\x22\xa8\xee\x5a\xfa\x7f\x64\xd4\xac\xa0\x3a\xf1\xc0\x33\x84\x5c\x6b\x9f\x12\x3c\xde\xb0\x7c\x1a\x7a\x54\xe7\x76\x24\x46\xdd\xb4\x31\x04\x5b\x13\x82\xa9\xba\xbf\x8e\x62\xaa\x1c\x1a\x32\xa3\x45\x33\x12\x32\x51\x34\x82\x89\x4c\x35\x5a\x05\x73\xcb\x5a\x39\xe7\xe2\xd5\x6d\xa6\xa5\x80\x5a\x6a\xc7\x9c\x6c\x6e\x40\x31\xdd\xc4\x62\x5e\x27\x6a\x89\xd4\xa9\x23\xc6\x2c\xdd\x30\xde\x9e\xfa\xc4\x65\xe0\x67\xa7\xfd\x64\x4f\x63\x5d\x8a\x91\x2f\x70\xc3\x2a\x2a\xa0\x15\x0a\x2a\xe3\xa9\x31\x90\xca\x46\x91\x8a\xa6\xfd\x23\x9f\x6a\x42\x5e\x8d\xab\x5d\x47\x72\x8d\x58\xfa\xd3\xa8\x45\x9a\xed\xb8\x45\xb9\xca\x67\xd4\x49\x18\xa2\xd8\x07\x5d\x72\xcd\x9c\xdd\xb0\x34\xb7\x94\x25\xdc\x6d\x38\x12\x06\x94\x10\x1f\x2a\x56\xf9\xa0\x8f\x9b\x1d\x24\x87\xed\x96\xbe\x9c\x0d\x8a\xa9\x01\x66\x8c\x02\xa9\x1c\x35\x8b\x49\xf0\x52\xe6\xab\x38\x99\x52\xc6\xf7\x04\x1f\x1b\x42\xda\x47\x01\xb8\xf1\x3e\x6d\xbd\xe5\x82\xc3\x12\xd6\x03\xdf\x97\x8d\x41\x80\xa9\xef\x62\x42\x18\x24\xc9\x69\xf8\xb7\x12\xb6\x18\x70\x7d\x1a\xc2\xb0\x9a\x06\x71\xf8\x5d\x75\xd8\xa3\xfc\x58\xbd\x1b\xb3\xe8\x99\x86\x5e\x4d\x56\xbf\xd3\xd8\xf5\x22\x52\x83\x99\x86\xb7\x89\x0e\xe1\x29\x6d\xf9\xed\xe8\xc0\xdd\x68\xeb\x62\x06\xf8\xc7\x81\x00\x82\x4d\x5a\x55\x6b\x73\x1c\x46\x1c\x12\xc4\xe1\xa5\x78\x17\x15\x53\x8f\x1f\x18\xb8\x31\xe6\xfb\xd3\xd2\xef\xde\xbf\xbf\x93\x57\xe1\x7c\x87\x37\x96\x8a\xcc\xcc\x48\x75\x15\x3d\x5f\xa9\x92\x8a\x08\x3f\x97\x0a\x3d\x15\xb2\xc2\xf3\x43\x35\xcc\x46\x6b\x2a\x1f\x8b\x7c\x70\x71\x92\xd0\x5d\x18\x68\x3c\xe4\x5f\xba\xbd\xe1\x6a\x98\xa1\x8a\xa7\x90\xa2\x12\x71\xcc\xb8\xab\x3c\xe5\x17\x25\x24\x24\x6a\x33\xa9\x8c\x2a\x49\x6a\xda\x45\x97\x13\x4c\x48\x4b\xb2\xc6\x75\x44\x26\x81\xd1\x95\x28\x2d\xc2\x53\x31\x8a\x12\xbc\xb4\x93\x88\x51\xa7\x02\x6f\x59\x76\xd2\xd3\x83\x52\x2e\xed\x34\x62\x4c\x18\xd7\x57\x43\x27\x09\x18\xdf\xf7\xca\xcd\x5e\xb7\xc3\x0f\x09\x30\x5d\x3b\x3c\xf3\x25\xdf\xe1\xe8\xd3\x72\xf6\x38\x5e\x3e\xa1\xbf\xac\xa7\xab\xef\x76\xe9\x39\xf3\x8c\xbb\xb6\x67\x9f\xd7\x96\xf4\x84\x2e\xda\xca\x0e\xe1\x55\x9b\x18\x27\xc9\xb7\x88\x11\x77\x8f\x93\x3d\xda\x1c\x39\x60\xa9\xbe\xf2\x7c\x36\xed\xab\xcc\xca\x84\xbe\x44\xc7\xd7\xd1\x97\x48\xf0\x53\x79\xd0\xa2\xaf\x0a\x8d\xa8\xaf\x6c\x50\xf5\x71\xb0\x78\x37\x4f\x49\xc9\x36\xb5\xfe\x18\xaf\xe7\x4e\x17\xa2\x3c\x39\x0b\x7b\x2e\xfb\x3a\x89\x72\xbb\xc9\x62\xbe\x7e\xb4\x53\x0d\xae\x2c\xa7\x5c\x08\x85\xf0\xc2\x9f\xb1\xdf\x7f\xa3\xfc\x00\xfa\x66\x34\x62\xb0\xf3\x7c\x9c\x24\x77\xf2\x2f\x9d\xc6\xe2\x78\x65\x08\x6d\xe8\xc5\x4f\x24\x9a\xf1\x45\xd7\x5d\xf8\xab\x1f\x02\x1a\x03\x30\xc3\xfe\x0a\xec\x36\xc4\x8a\xb7\x83\x9a\xa3\x50\xac\xd4\x25\xb2\xc6\xd7\x5a\xca\x68\xf3\xa7\x70\xdd\x91\xe5\x5e\x3b\x45\x21\x3e\x7a\xaa\x88\x2b\x0f\x3c\x9a\xd9\x2b\xfe\xbb\x44\x21\x39\xc7\x37\xc5\x63\x24\x88\xee\xe4\x6d\x70\xf3\x06\xaf\x19\x37\x77\xda\x05\x57\x6c\x6c\xad\xca\x7f\x51\xe9\x2e\x1b\x48\xfc\x0f\x1c\xcb\x50\x26\x0b\x7b\xe5\x2c\xc7\x33\x5b\x6f\x83\xcb\xcf\x21\xd3\xa9\xe0\xbf\x16\x43\x3c\x6b\xa2\x3e\x25\xaa\x56\x26\x34\x11\xa3\x11\xa8\xe1\x5b\x72\x8b\x9d\x46\xec\x1e\xe9\xb1\xd3\x35\x40\x2f\xac\x51\x87\x5f\x87\x50\x1c\x9c\x51\x3f\xbd\xd1\x3a\x00\x13\xa9\xef\x00\xdf\x3e\xf9\x49\xf9\xe1\xd3\x18\xb1\x1c\xb6\x25\xa7\xa2\x19\x2a\x1a\x9c\x89\x78\xe4\xcb\xd5\xc5\xd8\x00\xd7\x1c\x77\xde\x2a\x8b\xf6\x67\x24\x9e\xcc\x75\x2d\xfb\x79\xd1\x46\xce\x4a\x5b\xac\xb4\x3a\x13\xec\x97\x8b\xd4\x45\x51\x0b\xd2\x2a\x9e\xa4\x78\xc1\x61\x8a\x5c\x8a\xdb\x92\x91\x92\x17\xf7\xb2\x53\x9c\xdf\x16\x94\xc4\x33\x7b\x6a\x7d\xed\xf4\xd4\x9c\xcd\x68\xf0\x8e\x16\xb6\xec\x81\x6d\xbd\x9a\xd9\x7f\xa2\x0d\x67\x00\xa8\x7f\x9e\xa1\xc6\x37\x46\xde\x04\xdd\x8d\x57\xac\xaf\x7a\x81\xeb\x3d\x0b\xc4\x62\x97\xe9\x8c\x6c\x84\x56\x05\xda\x8d\x51\x51\x25\xf5\x72\xb7\x5a\x48\x88\x45\xd1\x76\x3a\xc5\x97\x57\x52\xcd\xb1\x5c\x3a\x15\xb9\xf3\xb6\xd1\x85\xb1\x52\x27\xf5\xd2\x2a\xdc\x0b\xdc\x95\x36\xd2\x35\x02\x13\xd8\x0a\xd6\x6e\x80\xf9\x53\x89\x5e\xc0\x4b\x9f\x02\x60\xfe\xd8\xd4\x0c\x28\xfb\xff\x0f\xf2\xa2\x20\x4e\xed\x53\xbb\xff\x02\x00\x00\xff\xff\xaf\x04\x0f\x93\x2b\x34\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/01_init"].(os.FileInfo),
	}
	fs["/01_init"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/01_init/down.sql"].(os.FileInfo),
		fs["/01_init/up.sql"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
