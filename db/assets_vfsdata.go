// Code generated by vfsgen; DO NOT EDIT.

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 5, 1, 1, 42, 23, 289691434, time.UTC),
		},
		"/01_init": &vfsgen۰DirInfo{
			name:    "01_init",
			modTime: time.Date(2019, 5, 2, 5, 2, 12, 258831940, time.UTC),
		},
		"/01_init/down.sql": &vfsgen۰CompressedFileInfo{
			name:             "down.sql",
			modTime:          time.Date(2019, 4, 30, 6, 0, 6, 918691434, time.UTC),
			uncompressedSize: 1121,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\x4f\x4f\xb4\x30\x10\xc6\xef\xfd\x14\x73\x7c\xdf\x98\x12\xf1\x26\x9c\x34\x78\xdb\xb8\xab\xbb\x77\x32\xc0\x08\x4d\xfa\x67\xd2\xc2\x1a\xbe\xbd\xc1\x9a\xb8\x81\xd5\x78\xe8\xb1\xe9\x33\xbf\xdf\x3c\x23\xa5\x90\x12\x0e\x2e\x8c\xbd\xa7\xe3\xcb\x0e\x3a\x1c\xb1\xc1\x40\xd0\x4d\x86\x85\x94\x62\xf9\xaf\x26\xc3\xd4\xc1\x9b\x77\xe6\x3b\x70\x26\x1f\x94\xb3\x90\xe7\xd9\x1d\xfc\xab\xa8\x51\x18\x1f\x32\xcf\xb8\xef\xfa\xfb\xdb\x9b\xfc\xff\xc5\x74\x33\x03\xf7\xf5\x82\xfd\xe3\xa8\x88\xcb\x3d\xa3\xa1\x02\x5a\x4d\xe8\xd1\xb6\x54\x8f\x33\x53\x28\xe1\x34\x33\x15\x70\x7a\x78\xdc\x3d\x95\x70\x6c\x07\x32\x58\x00\x4f\x8d\x56\x6d\x09\xfb\x77\x4b\xbe\x00\x8e\xbd\xc2\x67\x8f\xea\x75\x7f\x88\xf9\xaf\x58\xb6\x66\x8a\x1f\x94\x89\x6d\x1b\x11\x9d\xc9\x8e\x09\x7b\x5d\xf2\xae\xa9\x12\x5a\x36\x02\x46\xbf\xc8\xdb\x41\xe9\xae\xf6\xa4\x71\x54\xce\x86\x41\x71\x1a\xe9\x2f\xf8\xf5\x22\xe4\x58\x53\x1a\x69\x44\xad\x04\xde\x69\xaa\x31\x04\xd5\x5b\x93\xec\xa8\x1b\xe8\x15\x69\x3a\xd3\x06\x3f\x05\xf2\x69\xf0\x91\x24\xc4\x47\x00\x00\x00\xff\xff\x83\xc8\x93\xdb\x61\x04\x00\x00"),
		},
		"/01_init/up.sql": &vfsgen۰CompressedFileInfo{
			name:             "up.sql",
			modTime:          time.Date(2019, 5, 2, 5, 2, 12, 228831940, time.UTC),
			uncompressedSize: 13455,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x9b\x5d\x73\xda\x38\x17\xc7\xaf\x1f\x3e\x85\xee\x4a\xe6\x59\x32\xa5\x33\x9d\x9d\x4d\xae\x28\x78\xb7\xcc\x12\xd3\x82\xd9\x36\x57\x1e\x61\x9f\x80\x66\xfd\xb6\x92\x48\x43\x3f\xfd\x8e\x2d\x03\x2a\xb6\x64\x3b\x95\x16\x2e\xb1\x8e\x8e\x7e\xe7\x44\xff\x73\x24\x7b\x32\x18\xf4\x06\x03\xf4\x29\x65\x7c\x43\x61\xf9\x79\x86\x42\xcc\xf1\x1a\x33\x40\xe1\x2e\xce\x7a\x83\x41\x2f\x1f\x9f\xec\xe2\x0c\x42\xf4\x44\xd3\xf8\x64\xf0\x0c\x94\x91\x34\x41\xc3\xe1\xed\x3b\xd4\x9f\xc0\x9a\x60\xf1\x63\x30\xbc\xcd\x36\xe1\xe6\xb7\xb7\xff\x1f\xde\x48\xb3\xd7\x7b\x94\x6d\xfc\xdc\x6d\xcb\xa9\x3d\x01\xe7\xe2\x18\xee\x50\x10\x01\xa6\x38\x09\xc0\xe7\xfb\x0c\xd8\x3d\xf2\xf6\x19\xdc\x21\x6f\xf4\x61\xe6\xdc\xa3\x65\xb0\x85\x18\xdf\xa1\x6c\xb7\x8e\x48\x70\x8f\xe6\xdf\x12\xa0\x77\x28\x13\x71\xb1\x22\x8e\xf1\xc2\x19\x79\x8e\x98\x51\x1a\xde\x9e\x79\x45\xfd\x1e\x42\x08\x91\x10\xad\xc9\x86\x24\x1c\xb9\x73\x0f\xb9\xab\xd9\xec\x97\xe2\x79\x40\x01\x73\x08\x7d\xcc\x11\x27\x31\x30\x8e\xe3\x0c\x7d\x23\x7c\x5b\xfc\x44\xdf\xd3\x04\x84\xe1\x2e\x0b\xdb\x19\x86\x10\x41\x2b\xc3\x04\xc7\x80\x9e\x31\x0d\xb6\x98\xf6\xdf\xbf\xbd\x39\x23\x0b\x77\x14\xf3\x3c\xa3\x82\x5b\x3c\x5c\xef\x48\xc4\x49\x82\xd6\x69\x1a\x01\x4e\x8e\x53\x7a\x37\xf7\xbd\x5e\x6f\x34\xf3\x9c\x85\x3e\x1b\xf3\x2f\x6e\x6e\x32\x3f\xe6\xf1\x5e\xfb\x37\xf1\x49\xe8\x33\xf8\xe7\xf0\xa7\x59\x3a\x9f\x57\x8e\x3b\xee\xf6\xd7\x39\x4c\x52\x20\x95\x4b\x14\xe1\x8d\x96\x65\xb4\xc5\xaf\xa5\x37\x5a\x78\xe8\xcb\xd4\xfb\x88\x86\xc5\x83\xa9\x3b\x5e\x38\x0f\x8e\xeb\xa1\x0f\x8f\xe5\x23\x77\x8e\x1e\xa6\xee\x5f\xa3\xd9\xca\x39\xfe\x1e\x7d\x3d\xfd\x1e\x8f\xc6\x1f\x1d\x34\x6c\x97\x9d\x12\xc5\x50\x92\x0a\x37\x13\xf4\xe1\xb1\x5d\xb6\x04\x5e\xbb\x64\x1d\x5d\x2b\xcc\x6e\x49\x98\x47\x5c\xcb\x6c\x5c\x67\x57\x2c\xb1\x1f\xd3\xe2\x53\x78\x02\x5a\x0f\x99\x01\x65\x69\xa2\xb3\xc8\xd9\x94\xcb\x35\xeb\xaf\x83\xf4\xec\xaa\xee\x3a\x04\xd7\x5d\x6b\xff\x8d\xcc\x9a\x15\x56\x27\x2e\x78\x86\x84\x1b\xed\x62\x92\xc7\xeb\x95\x57\x43\x07\xeb\xdc\xac\xe4\xa0\x9b\xf6\x85\x64\x6b\x43\x2e\x55\xf7\x17\xd1\x4b\x15\xc3\x40\x62\x8c\x28\x46\x41\x26\x4b\x46\x32\x51\x69\xc6\xa8\x5c\xae\x54\x29\xff\x6b\xd1\x5c\x4e\xa9\x7a\x75\x0b\x6a\x29\xaf\x96\xca\xb2\x27\xaa\xcb\xeb\xa9\x9b\x94\xec\xab\x48\x2f\xa0\x3a\xed\x64\x98\xe6\xfb\x25\xd8\x92\x28\xf4\x29\x44\xc5\x45\x81\x6d\x49\x66\x4a\x4f\xea\x05\xae\x53\x63\xc5\x11\x4e\x30\x6b\xf4\x73\x08\xa7\xc6\x40\x29\x1a\x4d\x26\x9a\xb6\x8f\x7a\xaa\x0d\x71\x35\xae\x76\x11\xc1\x35\x52\x99\xcf\xa2\x11\x61\xb6\xe3\x96\xc5\xaa\x9e\x51\x27\x60\x48\xb3\x08\x4c\x89\xb5\x70\x76\xbd\xc2\x7c\x22\x94\x71\xbf\xe1\xb0\x18\x93\x30\x8c\xa0\x62\x25\x06\x23\xdc\xec\x80\xed\x9e\x9e\xc8\xcb\xc9\xa0\x9c\x1a\x63\x4a\x09\x84\x95\x43\x68\x39\x09\x5e\x10\x49\x38\x6c\x80\x9e\x1f\x5e\x09\xe5\xdb\x10\xef\x1b\x62\xdb\xa6\x31\xf8\xd9\x36\xef\xbf\x87\x95\x87\x07\xea\x00\xa2\x48\x35\x06\x31\x26\x91\x8f\xc3\x90\x02\x63\xc7\xe1\x5f\x0f\xd4\xe5\x80\x1f\x91\x04\x86\xd5\x7c\xc8\xc3\xef\xaa\xc3\x01\xe1\xfb\xea\xd3\x8c\xa6\xcf\x24\x09\x6a\xd2\xfb\x9d\x64\x7e\x90\x86\x35\x98\x79\x78\xeb\x74\x97\x1c\xf3\x27\x1e\xa7\x3b\xee\xa7\x4f\x3e\xa6\x80\x7f\x1c\x88\x21\x5e\xe7\xc5\xb5\x36\xd9\x49\xca\x81\x21\x0e\x2f\xe5\xcb\xac\x8c\x04\x7c\x47\xc1\xcf\x30\xdf\x1e\x97\x7e\xf7\xfe\xfd\x8d\xba\x18\x8b\x9d\xde\x58\x32\x0a\x33\x2b\x45\x56\xf6\x7c\x99\x82\x2a\x13\xfc\x5c\x26\xcc\x14\xca\x0a\xcf\x0f\x45\xb1\x18\xad\x29\x80\x34\x8d\xc0\xc7\x8c\x91\x4d\x12\x1b\xbc\x07\x9c\xbb\xbd\xde\xa2\xd8\x7c\x27\x28\x62\xd1\x8c\x33\x8e\x29\xf7\xb5\x77\x82\xb2\xd6\x24\xa1\xde\x4c\xa9\xb7\x4a\x3a\x9b\xf6\xdb\xf9\x04\x1b\x1a\x54\xac\x71\x11\x35\x2a\x58\x4c\xe5\xc9\x88\x42\x75\x8c\xb2\x56\xcf\xed\x14\xaa\x35\x29\xd5\x2b\xd6\xa7\xf2\xb4\xa1\x15\x4b\x3b\x85\x58\x93\xc5\xc5\xb5\xd0\x49\x00\xd6\x77\xbd\x76\xab\xd7\xed\xef\x1d\x03\x6a\x6a\x7f\x17\xbe\x94\xfb\x1b\x7d\x5a\x4c\x1f\x46\x8b\x47\xf4\xa7\xf3\x78\xf1\xbd\xae\x3c\x8c\x9e\x70\x57\xee\xf4\xf3\xca\x51\x9e\xe7\x65\x5b\xd5\x91\xbd\x6a\x93\x61\xc6\xbe\xa5\x34\xf4\xb7\x98\x6d\xd1\x7a\xcf\x01\x2b\xd5\x25\xd2\xd9\xb4\xad\x0a\x2b\x1b\xea\x92\x1d\x5f\x44\x5d\x32\xc0\x4f\xa5\xc1\x88\xba\x2a\x34\xb2\xba\x8a\x41\xdd\x27\xc8\xf2\x15\x3f\x09\x0f\x6c\x13\xe7\xf7\xd1\x6a\xe6\x75\x21\x12\xc9\x99\xbb\x33\xd5\x37\x50\x24\xec\xc6\xf3\xd9\xea\xc1\xcd\x15\xb8\x74\xbc\xc3\x42\x28\x81\x17\xfe\x8c\xa3\xfe\x1b\xed\x67\xd6\x37\x77\x77\x14\x36\x41\x84\x19\xbb\x51\x7f\x4f\xb5\x16\xc7\x2b\x43\x68\x43\x2f\x7f\x69\x31\x8c\x2f\xbb\xee\xc2\x5f\xfd\xa0\xd0\x18\x80\x1d\xf6\x57\x60\xb7\x21\xd6\xbc\x48\x34\x1c\x85\x66\xa5\x2e\x91\x35\xbe\x02\xd3\x46\x2b\x6e\xea\xa6\x23\x13\x5e\x3b\x45\x21\xdf\x4f\x75\xc4\x95\xbb\x8e\x61\xf6\x8a\xff\x2e\x51\x28\xce\xf0\x4d\xf1\x58\x09\xa2\x3b\x79\x1b\x5c\xd1\xdf\x0d\xe3\x0a\xa7\x5d\x70\xe5\xc6\xd6\xaa\xfc\x97\x95\xee\xbc\x81\x64\x7f\xc3\xfe\x10\xca\x78\xee\x2e\xbd\xc5\x68\xea\x9a\x6d\x70\xe2\x18\x32\x99\x48\xfe\x6b\x31\xe4\xa3\x26\xea\x93\x50\xd7\xca\xa4\x26\x62\x35\x02\x3d\x7c\x4b\x6e\xb9\xd3\xc8\xdd\x23\x3f\x75\xfa\x16\xe8\xa5\x35\xea\xf0\xeb\x10\xca\x73\x33\xea\xe7\x0f\x5a\x07\x60\x23\xf5\x1d\xe0\xdb\x27\x9f\x1d\x3e\x91\x5a\x23\x56\xc3\xb6\xe4\xd4\x34\x43\x4d\x83\xb3\x11\x8f\x7a\xb9\xba\x18\x1b\xe0\x9a\xe3\x16\xad\xb2\x6c\x7f\x56\xe2\x29\x5c\xd7\xb2\x9f\x16\x6d\xe4\xac\xb4\xc5\x4a\xab\xb3\xc1\x7e\xbe\x48\x5d\x14\xb5\x20\xad\xe2\x61\xe5\xeb\x0d\x5b\xe4\x4a\xdc\x96\x8c\x24\x7c\xf1\xcf\x3b\xc5\xe9\x65\xc1\x81\x78\xea\x4e\x9c\xaf\x9d\x2e\xcd\xc5\x8c\x06\xef\x68\xee\xaa\x2e\x6c\xab\xe5\xd4\xfd\x03\xad\x39\x05\x40\xfd\xd3\x0c\x3d\xbe\x35\xf2\x26\xe8\x6e\xbc\x72\x7d\x35\x0b\x5c\xef\x59\x22\x96\xbb\x4c\x67\x64\x2b\xb4\x3a\xd0\x6e\x8c\x9a\x2a\x69\x96\xbb\xd5\x42\x52\x2c\x9a\xb6\xd3\x29\x3e\x51\x49\x0d\xc7\x72\xee\x54\xe6\x16\x6d\xa3\x0b\x63\xa5\x4e\x9a\xa5\xd5\xb8\x97\xb8\x2b\x6d\xa4\x6b\x04\x36\xb0\x35\xac\xdd\x00\xc5\xad\xc4\x2c\xe0\xb9\x4f\x09\x50\x5c\x9b\x9a\x01\x55\xff\x63\x84\x82\x34\xce\x72\xfb\xdc\xee\xdf\x00\x00\x00\xff\xff\x4c\x40\x26\xb4\x8f\x34\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/01_init"].(os.FileInfo),
	}
	fs["/01_init"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/01_init/down.sql"].(os.FileInfo),
		fs["/01_init/up.sql"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
